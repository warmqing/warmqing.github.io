<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oolong Box</title>
  
  <subtitle>Oolong is a happy accident,Serendipity is life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.oolongbox.com/"/>
  <updated>2019-09-19T02:55:39.374Z</updated>
  <id>https://www.oolongbox.com/</id>
  
  <author>
    <name>warmqing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark——Structured streaming + hive sink</title>
    <link href="https://www.oolongbox.com/box/2c3ea3f5/"/>
    <id>https://www.oolongbox.com/box/2c3ea3f5/</id>
    <published>2019-09-18T15:47:01.523Z</published>
    <updated>2019-09-19T02:55:39.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spark——Structured-streaming-hive-sink"><a href="#Spark——Structured-streaming-hive-sink" class="headerlink" title="Spark——Structured streaming + hive sink"></a>Spark——Structured streaming + hive sink</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>需求：Structured streaming消费kafka并将数据写入Hive表</p><p>spark 版本 2.3.1</p><p>scala 版本 2.11.8</p><p>spark从2.4版本以后，支持foreachBatch</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">streamingDF.writeStream.foreachBatch &#123; (batchDF: <span class="type">DataFrame</span>, batchId: <span class="type">Long</span>) =&gt;</span><br><span class="line">  <span class="comment">// Transform and write batchDF </span></span><br><span class="line">&#125;.start()</span><br></pre></td></tr></table></figure><p>所以本次需要自定义sink实现写Hive的操作</p><h2 id="Structured-streaming-消费kafka"><a href="#Structured-streaming-消费kafka" class="headerlink" title="Structured streaming 消费kafka"></a>Structured streaming 消费kafka</h2><h3 id="消费kafka数据，对json数据进行transform"><a href="#消费kafka数据，对json数据进行transform" class="headerlink" title="消费kafka数据，对json数据进行transform"></a>消费kafka数据，对json数据进行transform</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.<span class="type">Timestamp</span></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.&#123;<span class="type">JSON</span>, <span class="type">JSONObject</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.streaming.<span class="type">Trigger</span></span><br><span class="line"><span class="keyword">import</span> org.slf4j.<span class="type">LoggerFactory</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">StructuredReceiver</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> <span class="type">LOGGER</span> = <span class="type">LoggerFactory</span>.getLogger(<span class="type">StructuredReceiver</span>.getClass)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> suffix = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> (args != <span class="literal">null</span> &amp;&amp; args.length &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      suffix = args(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> checkpointDirectory = <span class="string">"/user/checkpoint/StructuredReceiver"</span> + suffix</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"StructuredReceiver"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> ss = <span class="type">SparkSession</span>.builder().enableHiveSupport().config(conf).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> ss.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> lines = ss</span><br><span class="line">      .readStream</span><br><span class="line">      .format(<span class="string">"kafka"</span>)</span><br><span class="line">      .option(<span class="string">"kafka.bootstrap.servers"</span>, <span class="string">"host1:port1,host2:port2"</span>)</span><br><span class="line">      .option(<span class="string">"subscribe"</span>, <span class="string">"topic"</span>)</span><br><span class="line">      .load()</span><br><span class="line">      .selectExpr(<span class="string">"CAST(key AS STRING)"</span>, <span class="string">"CAST(value AS STRING)"</span>, <span class="string">"CAST(timestamp AS TIMESTAMP)"</span>)</span><br><span class="line">      .as[(<span class="type">String</span>, <span class="type">String</span>, <span class="type">Timestamp</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据transform</span></span><br><span class="line">    <span class="keyword">val</span> resultDf = lines.map(record =&gt; &#123;</span><br><span class="line">      <span class="keyword">var</span> json: <span class="type">JSONObject</span> = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        json = <span class="type">JSON</span>.parseObject(record._2)</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> e: <span class="type">Exception</span> =&gt; &#123;</span><br><span class="line">          <span class="type">LOGGER</span>.warn(<span class="string">"parse josn erro"</span>, e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (json == <span class="literal">null</span> || json.isEmpty) &#123;</span><br><span class="line">        (<span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> appName = json.getString(<span class="string">"appName"</span>)</span><br><span class="line">        <span class="keyword">val</span> msg = json.getString(<span class="string">"msg"</span>)</span><br><span class="line">        (appName, msg)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).filter(pair =&gt; pair._1 != <span class="literal">null</span> &amp;&amp; pair._1 != <span class="string">""</span> &amp;&amp; pair._2 != <span class="literal">null</span> &amp;&amp; pair._2 != <span class="string">""</span>).map(pair =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> appName = pair._1</span><br><span class="line">      <span class="keyword">val</span> msg = pair._2</span><br><span class="line">      <span class="keyword">val</span> values = msg.split(<span class="string">"\t"</span>)</span><br><span class="line">      (values(<span class="number">0</span>), values(<span class="number">1</span>).toLong, values(<span class="number">2</span>).toInt, values(<span class="number">3</span>))</span><br><span class="line">    &#125;).toDF()</span><br><span class="line"></span><br><span class="line">    resultDf.writeStream</span><br><span class="line">      .outputMode(<span class="string">"append"</span>)</span><br><span class="line">      .trigger(<span class="type">Trigger</span>.<span class="type">ProcessingTime</span>(<span class="string">"10 seconds"</span>))<span class="comment">//批次时间</span></span><br><span class="line">      .format(<span class="string">"com.warmqing.spark.HiveSinkProvider"</span>)<span class="comment">//自定义HiveSinkProvider</span></span><br><span class="line">      .option(<span class="string">"checkpointLocation"</span>, checkpointDirectory)</span><br><span class="line">      .start()</span><br><span class="line">      .awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义Sink"><a href="#自定义Sink" class="headerlink" title="自定义Sink"></a>自定义Sink</h2><p>定义sink，将结构化数据写入Hive分区表</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.<span class="type">SimpleDateFormat</span></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Date</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.catalyst.<span class="type">CatalystTypeConverters</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.execution.streaming.<span class="type">Sink</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.functions.lit</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.sources.&#123;<span class="type">DataSourceRegister</span>, <span class="type">StreamSinkProvider</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.streaming.<span class="type">OutputMode</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">Row</span>, <span class="type">SQLContext</span>, <span class="type">SaveMode</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.<span class="type">LoggerFactory</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveSink</span>(<span class="params">sqlContext: <span class="type">SQLContext</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">                              parameters: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>],</span></span></span><br><span class="line"><span class="class"><span class="params">                              partitionColumns: <span class="type">Seq</span>[<span class="type">String</span>],</span></span></span><br><span class="line"><span class="class"><span class="params">                              outputMode: <span class="type">OutputMode</span></span>) <span class="keyword">extends</span> <span class="title">Sink</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">addBatch</span></span>(batchId: <span class="type">Long</span>, data: <span class="type">DataFrame</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> logger = <span class="type">LoggerFactory</span>.getLogger(<span class="keyword">this</span>.getClass)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> schema = <span class="type">StructType</span>(<span class="type">Array</span>(</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"app_name"</span>, <span class="type">StringType</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"event_time"</span>, <span class="type">LongType</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"type"</span>, <span class="type">IntegerType</span>),</span><br><span class="line">      <span class="type">StructField</span>(<span class="string">"uuid"</span>, <span class="type">StringType</span>)</span><br><span class="line">    ))</span><br><span class="line">    <span class="keyword">val</span> res = data.queryExecution.toRdd.mapPartitions &#123; rows =&gt;</span><br><span class="line">      <span class="keyword">val</span> converter = <span class="type">CatalystTypeConverters</span>.createToScalaConverter(schema)</span><br><span class="line">      rows.map(converter(_).asInstanceOf[<span class="type">Row</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 转化df格式</span></span><br><span class="line">    <span class="keyword">var</span> df = data.sparkSession.createDataFrame(res, schema)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> dateFormat: <span class="type">SimpleDateFormat</span> = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">val</span> date = dateFormat.format(<span class="keyword">new</span> <span class="type">Date</span>())</span><br><span class="line"></span><br><span class="line">    df = df.withColumn(<span class="string">"dt"</span>, lit(date))</span><br><span class="line">    df.write.mode(<span class="type">SaveMode</span>.<span class="type">Append</span>).format(<span class="string">"hive"</span>).partitionBy(<span class="string">"dt"</span>).saveAsTable(<span class="string">"Hive_table"</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HiveSinkProvider</span> <span class="keyword">extends</span> <span class="title">StreamSinkProvider</span> <span class="keyword">with</span> <span class="title">DataSourceRegister</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createSink</span></span>(sqlContext: <span class="type">SQLContext</span>, parameters: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">String</span>], partitionColumns: <span class="type">Seq</span>[<span class="type">String</span>], outputMode: <span class="type">OutputMode</span>): <span class="type">Sink</span> = &#123;</span><br><span class="line">    <span class="type">HiveSink</span>(sqlContext, parameters, partitionColumns, outputMode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">shortName</span></span>(): <span class="type">String</span> = <span class="string">"HiveSinkProvider"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spark——Structured-streaming-hive-sink&quot;&gt;&lt;a href=&quot;#Spark——Structured-streaming-hive-sink&quot; class=&quot;headerlink&quot; title=&quot;Spark——Structured 
      
    
    </summary>
    
      <category term="日志" scheme="https://www.oolongbox.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="scala" scheme="https://www.oolongbox.com/tags/scala/"/>
    
      <category term="spark" scheme="https://www.oolongbox.com/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 深分页问题</title>
    <link href="https://www.oolongbox.com/box/8be2bca3/"/>
    <id>https://www.oolongbox.com/box/8be2bca3/</id>
    <published>2019-04-28T11:22:51.298Z</published>
    <updated>2019-04-28T12:18:51.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch-深分页问题"><a href="#Elasticsearch-深分页问题" class="headerlink" title="Elasticsearch 深分页问题"></a>Elasticsearch 深分页问题</h1><h1 id="——from-size、search-after、scroll"><a href="#——from-size、search-after、scroll" class="headerlink" title="——from+size、search after、scroll"></a>——from+size、search after、scroll</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>订单查询从mysql迁移至Es，分页查询订单有超过1w条的需求</p><h2 id="Es几种分页方式"><a href="#Es几种分页方式" class="headerlink" title="Es几种分页方式"></a>Es几种分页方式</h2><h3 id="from-size"><a href="#from-size" class="headerlink" title="from+size"></a>from+size</h3><p>1、coordinate node向index的其余的shards 发送同样的请求，请求查询from+size条记录</p><p>2、汇总<code>（shards * （from + size））</code>条记录到coordinate node</p><p>3、coordinate node排序记录，最终抽取出真正的 from 后的 size 条结果</p><p>索引非常大时（千万级或亿级），无法用这个方法做深度分页，有OOM的风险</p><p>Java API：6.3</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SearchResponse response = client.prepareSearch(<span class="string">"index1"</span>, <span class="string">"index2"</span>)</span><br><span class="line">        .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)</span><br><span class="line">        .setQuery(QueryBuilders.termQuery(<span class="string">"multi"</span>, <span class="string">"test"</span>))                 <span class="comment">// Query</span></span><br><span class="line">        .setPostFilter(QueryBuilders.rangeQuery(<span class="string">"age"</span>).from(<span class="number">12</span>).to(<span class="number">18</span>))     <span class="comment">// Filter</span></span><br><span class="line">        .setFrom(<span class="number">0</span>).setSize(<span class="number">60</span>).setExplain(<span class="keyword">true</span>)</span><br><span class="line">        .get();</span><br></pre></td></tr></table></figure><h2 id="search-after"><a href="#search-after" class="headerlink" title="search after"></a>search after</h2><p>1、search after需要指定排序</p><p>官方文档建议：</p><p>每个文档具有一个唯一值的字段应该用作排序。否则，具有相同排序值的文档的排序顺序将无法识别。建议的方法是使用每个文档唯一值字段<code>_id</code>排序。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"size"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"match"</span> : &#123;</span><br><span class="line">            <span class="string">"title"</span> : <span class="string">"elasticsearch"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"search_after"</span>: [<span class="number">1463538857</span>, <span class="string">"654323"</span>],</span><br><span class="line">    <span class="string">"sort"</span>: [</span><br><span class="line">        &#123;<span class="string">"date"</span>: <span class="string">"asc"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"_id"</span>: <span class="string">"desc"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时使用文档的<code>_id</code>排序感觉很慢，后使用业务中的<code>id</code>字段</p><p>2、必须从第一页开始搜起（你可以随便指定一个坐标让它返回结果，只是你不知道会在全量结果的何处）</p><p>3、从第一页开始以后每次都带上<code>search_after</code> 排序值，从而为无状态实现一个状态，把每次固定的from + size偏移变成一个确定值，而查询则从这个偏移量开始获取size个doc，每个shard 获取size个，coordinate node最后汇总 shards*size 个。<strong>search after是一个常量查询延迟和开销</strong></p><p>Java API：6.3</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SearchResponse response = client.prepareSearch(<span class="string">"index1"</span>, <span class="string">"index2"</span>)</span><br><span class="line">        .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)</span><br><span class="line">        .setQuery(QueryBuilders.termQuery(<span class="string">"multi"</span>, <span class="string">"test"</span>))  <span class="comment">// Query</span></span><br><span class="line">.searchAfter(sortValues)   <span class="comment">//sortValues</span></span><br><span class="line">        .setPostFilter(QueryBuilders.rangeQuery(<span class="string">"age"</span>).from(<span class="number">12</span>).to(<span class="number">18</span>))     <span class="comment">// Filter</span></span><br><span class="line">        .setFrom(<span class="number">0</span>).setSize(<span class="number">60</span>).setExplain(<span class="keyword">true</span>)</span><br><span class="line">        .get();</span><br></pre></td></tr></table></figure><p>使用search after方式，参数<code>from</code>必须设置为0（或-1）<br><a id="more"></a></p><h2 id="Scroll"><a href="#Scroll" class="headerlink" title="Scroll"></a>Scroll</h2><p>使用scroll分页主要分为2步</p><p>第1步，初始化查询，获取scrollId，初始化时将所有符合搜索条件的搜索结果缓存起来，可以想象成快照。</p><p>第2步，使用scrollId迭代查询，从这个快照里取数据，也就是说，在初始化后对索引插入、删除、更新数据都不会影响遍历结果。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.elasticsearch.index.query.QueryBuilders.*;</span><br><span class="line"></span><br><span class="line">QueryBuilder qb = termQuery(<span class="string">"multi"</span>, <span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">SearchResponse scrollResp = client.prepareSearch(test)</span><br><span class="line">        .addSort(FieldSortBuilder.DOC_FIELD_NAME, SortOrder.ASC)</span><br><span class="line">        .setScroll(<span class="keyword">new</span> TimeValue(<span class="number">60000</span>))</span><br><span class="line">        .setQuery(qb)</span><br><span class="line">        .setSize(<span class="number">100</span>).get(); <span class="comment">//max of 100 hits will be returned for each scroll</span></span><br><span class="line"><span class="comment">//Scroll until no hits are returned</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : scrollResp.getHits().getHits()) &#123;</span><br><span class="line">        <span class="comment">//Handle the hit...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    scrollResp = client.prepareSearchScroll(scrollResp.getScrollId()).setScroll(<span class="keyword">new</span> TimeValue(<span class="number">60000</span>)).execute().actionGet();</span><br><span class="line">&#125; <span class="keyword">while</span>(scrollResp.getHits().getHits().length != <span class="number">0</span>); <span class="comment">// Zero hits mark the end of the scroll and the while loop.</span></span><br></pre></td></tr></table></figure><h2 id="Scroll与search-after对比"><a href="#Scroll与search-after对比" class="headerlink" title="Scroll与search after对比"></a>Scroll与search after对比</h2><p>1、scroll与search after都不能解决跳页问题</p><p>2、scroll不适合用来做实时搜索，而更适用于后台批处理任务，短时间内不断重复同一查询</p><p>3、search after始终针对最新版本进行查询，可用于实时用户请求</p><h2 id="折衷方案"><a href="#折衷方案" class="headerlink" title="折衷方案"></a>折衷方案</h2><p>  由于scroll无法做到实时查询，也不适用前段用户请求，最后采用from size + seach after结合的方式</p><p>总体思路，隐式支持跳页：</p><p>sortValues不为空时，使用searh after方式<br>sortValues为空时，使用from size方式</p><p>1、用户第一次查询后，缓存返回结果最后一条记录的sortValue，作为下一页的search after参数</p><p>2、用户跳页时，如果缓存中没有sortValue值，将使用from size方式查询，最跳至10000条记录处</p><p>3、用户点击一页后，持续点击下一页，将使用search after方式，可持续进行查询，没有深分页限制</p><p>4、折衷方案，最好的方式是前端尽量使用下一页方式查询，不要支持跳页</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">queryFromEs</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        Response response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> pageNo = request.getPageNo();</span><br><span class="line">        <span class="keyword">int</span> pageSize = request.getPageSize();</span><br><span class="line">        <span class="keyword">int</span> from = (pageNo - <span class="number">1</span>) * pageSize;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//从Es中获取当前pageNo对应的的sortValue</span></span><br><span class="line">        Object[] sortValues = getSortValue(request);</span><br><span class="line"></span><br><span class="line">        Result result = Seacher.deepQuery(sortValues, from, pageSize);</span><br><span class="line">        List hits = result.getHits();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isNotEmpty(hits))&#123;</span><br><span class="line">            DocValue docValue = hits.get(hits.size() -<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//Es结果最后一条记录的sortValue设置到redis中，作为请求下一页的参数</span></span><br><span class="line">            setSortValueTodRedis(request, docValue.getSortValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setResult(hits);</span><br><span class="line">        response.setTotal(result.getTotal());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前请求对应的sortValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object[] getSortValue(Request request) &#123;</span><br><span class="line">        Object[] sortValues = <span class="keyword">null</span>;</span><br><span class="line">        String sortValue = JedisUtil.get(getRequestMd5(request, request.getPageNo(), request.getPageSize()));</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(sortValue)) &#123;</span><br><span class="line">            String[] values = sortValue.split(<span class="string">","</span>);</span><br><span class="line">            sortValues = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line">            sortValues[<span class="number">0</span>] = Long.valueOf(values[<span class="number">0</span>]);<span class="comment">//date</span></span><br><span class="line">            sortValues[<span class="number">1</span>] = values[<span class="number">1</span>];<span class="comment">//id</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sortValues;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前请求参数对应的md5值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRequestMd5</span><span class="params">(Request request, <span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Md5Util.EncoderByMd5(SORTVALUE_PREFIX + request.getParam1() + request.getParam2() + request.getParam3() + pageNo + pageSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在redis中缓存设置当前请求下一页的sortValues值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setSortValuesTodRedis</span><span class="params">(Request request, String sortValue)</span> </span>&#123;</span><br><span class="line">        String md5Key = getRequestMd5(request, request.getPageNo() + <span class="number">1</span>, request.getPageSize());</span><br><span class="line">        JedisUtil.setNx(md5Key, sortValue, TimePeriod.Seconds.minutes30);</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Seacher</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sortValues不为空时，使用searh after方式</span></span><br><span class="line"><span class="comment">     * sortValues为空时，使用from size方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">deepQuery</span><span class="params">(Object[] sortValues, <span class="keyword">int</span> from, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Result result = <span class="keyword">new</span> Result&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        QueryBuilder qb = termQuery(<span class="string">"multi"</span>, <span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">        SearchRequestBuilder request = client.prepareSearch(<span class="string">"index1"</span>)</span><br><span class="line">                .setTypes(<span class="string">"type1"</span>)</span><br><span class="line">                .addSort(SortBuilders.fieldSort(<span class="string">"date"</span>).order(SortOrder.DESC))</span><br><span class="line">                .addSort(SortBuilders.fieldSort(<span class="string">"id"</span>).order(SortOrder.DESC))</span><br><span class="line">                .setQuery(qb);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sortValues != <span class="keyword">null</span>)&#123;</span><br><span class="line">            request.searchAfter(sortValues);</span><br><span class="line">            from = <span class="number">0</span>;<span class="comment">//search_after方式 from必须从0开始</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        request.setFrom(from);</span><br><span class="line">        request.setSize(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//超出ES from + size 最大限制,ES_MAX_FROM_SIZE=10000</span></span><br><span class="line">        <span class="keyword">if</span> (from + size &gt; ES_MAX_FROM_SIZE)&#123;</span><br><span class="line">            result.setTotal(<span class="number">0</span>);</span><br><span class="line">            result.setHits(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            log.warn(<span class="string">"from + size &gt;= ES_MAX_FROM_SIZE, Query DSL:&#123;&#125;"</span>, request.toString());</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"Query DSL:&#123;&#125;"</span>, request.toString());</span><br><span class="line"></span><br><span class="line">        SearchResponse response = request.get();</span><br><span class="line"></span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line"></span><br><span class="line">        result.setTotal(hits.getTotalHits());</span><br><span class="line"></span><br><span class="line">        result.setHits(hits);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Elasticsearch-深分页问题&quot;&gt;&lt;a href=&quot;#Elasticsearch-深分页问题&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch 深分页问题&quot;&gt;&lt;/a&gt;Elasticsearch 深分页问题&lt;/h1&gt;&lt;h1 id=&quot;——from-size、search-after、scroll&quot;&gt;&lt;a href=&quot;#——from-size、search-after、scroll&quot; class=&quot;headerlink&quot; title=&quot;——from+size、search after、scroll&quot;&gt;&lt;/a&gt;——from+size、search after、scroll&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;订单查询从mysql迁移至Es，分页查询订单有超过1w条的需求&lt;/p&gt;
&lt;h2 id=&quot;Es几种分页方式&quot;&gt;&lt;a href=&quot;#Es几种分页方式&quot; class=&quot;headerlink&quot; title=&quot;Es几种分页方式&quot;&gt;&lt;/a&gt;Es几种分页方式&lt;/h2&gt;&lt;h3 id=&quot;from-size&quot;&gt;&lt;a href=&quot;#from-size&quot; class=&quot;headerlink&quot; title=&quot;from+size&quot;&gt;&lt;/a&gt;from+size&lt;/h3&gt;&lt;p&gt;1、coordinate node向index的其余的shards 发送同样的请求，请求查询from+size条记录&lt;/p&gt;
&lt;p&gt;2、汇总&lt;code&gt;（shards * （from + size））&lt;/code&gt;条记录到coordinate node&lt;/p&gt;
&lt;p&gt;3、coordinate node排序记录，最终抽取出真正的 from 后的 size 条结果&lt;/p&gt;
&lt;p&gt;索引非常大时（千万级或亿级），无法用这个方法做深度分页，有OOM的风险&lt;/p&gt;
&lt;p&gt;Java API：6.3&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SearchResponse response = client.prepareSearch(&lt;span class=&quot;string&quot;&gt;&quot;index1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;index2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setQuery(QueryBuilders.termQuery(&lt;span class=&quot;string&quot;&gt;&quot;multi&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;))                 &lt;span class=&quot;comment&quot;&gt;// Query&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setPostFilter(QueryBuilders.rangeQuery(&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;).from(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;).to(&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;))     &lt;span class=&quot;comment&quot;&gt;// Filter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setFrom(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).setSize(&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;).setExplain(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .get();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;search-after&quot;&gt;&lt;a href=&quot;#search-after&quot; class=&quot;headerlink&quot; title=&quot;search after&quot;&gt;&lt;/a&gt;search after&lt;/h2&gt;&lt;p&gt;1、search after需要指定排序&lt;/p&gt;
&lt;p&gt;官方文档建议：&lt;/p&gt;
&lt;p&gt;每个文档具有一个唯一值的字段应该用作排序。否则，具有相同排序值的文档的排序顺序将无法识别。建议的方法是使用每个文档唯一值字段&lt;code&gt;_id&lt;/code&gt;排序。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET twitter/_search&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;size&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;query&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;match&quot;&lt;/span&gt; : &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;elasticsearch&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;search_after&quot;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;1463538857&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;654323&quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;sort&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;date&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;asc&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;_id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;desc&quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当时使用文档的&lt;code&gt;_id&lt;/code&gt;排序感觉很慢，后使用业务中的&lt;code&gt;id&lt;/code&gt;字段&lt;/p&gt;
&lt;p&gt;2、必须从第一页开始搜起（你可以随便指定一个坐标让它返回结果，只是你不知道会在全量结果的何处）&lt;/p&gt;
&lt;p&gt;3、从第一页开始以后每次都带上&lt;code&gt;search_after&lt;/code&gt; 排序值，从而为无状态实现一个状态，把每次固定的from + size偏移变成一个确定值，而查询则从这个偏移量开始获取size个doc，每个shard 获取size个，coordinate node最后汇总 shards*size 个。&lt;strong&gt;search after是一个常量查询延迟和开销&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java API：6.3&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SearchResponse response = client.prepareSearch(&lt;span class=&quot;string&quot;&gt;&quot;index1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;index2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setQuery(QueryBuilders.termQuery(&lt;span class=&quot;string&quot;&gt;&quot;multi&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;))  &lt;span class=&quot;comment&quot;&gt;// Query&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		.searchAfter(sortValues)   &lt;span class=&quot;comment&quot;&gt;//sortValues&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setPostFilter(QueryBuilders.rangeQuery(&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;).from(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;).to(&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;))     &lt;span class=&quot;comment&quot;&gt;// Filter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .setFrom(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).setSize(&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;).setExplain(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .get();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用search after方式，参数&lt;code&gt;from&lt;/code&gt;必须设置为0（或-1）&lt;br&gt;
    
    </summary>
    
      <category term="日志" scheme="https://www.oolongbox.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Elasticsearch" scheme="https://www.oolongbox.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 基本概念</title>
    <link href="https://www.oolongbox.com/box/2b73e945/"/>
    <id>https://www.oolongbox.com/box/2b73e945/</id>
    <published>2019-04-24T13:26:41.958Z</published>
    <updated>2019-04-28T12:18:51.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch-基本概念"><a href="#Elasticsearch-基本概念" class="headerlink" title="Elasticsearch 基本概念"></a>Elasticsearch 基本概念</h1><h3 id="索引-Index"><a href="#索引-Index" class="headerlink" title="索引(Index)"></a>索引(Index)</h3><p>ES将数据存储于一个或多个索引中，索引是具有类似特性的文档的集合。类比传统的关系型数据库领域来说，索引相当于SQL中的一个数据库，或者一个数据存储方案(schema)。索引由其名称(必须为全小写字符)进行标识，并通过引用此名称完成文档的创建、搜索、更新及删除操作。一个ES集群中可以按需创建任意数目的索引。<br><a id="more"></a></p><h3 id="类型-Type"><a href="#类型-Type" class="headerlink" title="类型(Type)"></a>类型(Type)</h3><p>类型是索引内部的逻辑分区(category/partition)，然而其意义完全取决于用户需求。因此，一个索引内部可定义一个或多个类型(type)。一般来说，类型就是为那些拥有相同的域的文档做的预定义。例如，在索引中，可以定义一个用于存储用户数据的类型，一个存储日志数据的类型，以及一个存储评论数据的类型。类比传统的关系型数据库领域来说，类型相当于“表”。</p><h3 id="文档-Document"><a href="#文档-Document" class="headerlink" title="文档(Document)"></a>文档(Document)</h3><p>文档是Lucene索引和搜索的原子单位，它是包含了一个或多个域的容器，基于JSON格式进行表示。文档由一个或多个域组成，每个域拥有一个名字及一个或多个值，有多个值的域通常称为“多值域”。每个文档可以存储不同的域集，但同一类型下的文档至应该有某种程度上的相似之处。</p><h3 id="映射-Mapping"><a href="#映射-Mapping" class="headerlink" title="映射(Mapping)"></a>映射(Mapping)</h3><p>ES中，所有的文档在存储之前都要首先进行分析。用户可根据需要定义如何将文本分割成token、哪些token应该被过滤掉，以及哪些文本需要进行额外处理等等。另外，ES还提供了额外功能，例如将域中的内容按需排序。事实上，ES也能自动根据其值确定域的类型。</p><h3 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点(Node)"></a>节点(Node)</h3><p>   运行了单个实例的ES主机称为节点，它是集群的一个成员，可以存储数据、参与集群索引及搜索操作。类似于集群，节点靠其名称进行标识，默认为启动时自动生成的随机Marvel字符名称。用户可以按需要自定义任何希望使用的名称，但出于管理的目的，此名称应该尽可能有较好的识别性。节点通过为其配置的ES集群名称确定其所要加入的集群。</p><h3 id="分片-Shard-、副本-Replica"><a href="#分片-Shard-、副本-Replica" class="headerlink" title="分片(Shard)、副本(Replica)"></a>分片(Shard)、副本(Replica)</h3><p>ES的“分片(shard)”机制可将一个索引内部的数据分布地存储于多个节点，它通过将一个索引切分为多个底层物理的Lucene索引完成索引数据的分割存储功能，这每一个物理的Lucene索引称为一个分片(shard)。每个分片其内部都是一个全功能且独立的索引，因此可由集群中的任何主机存储。创建索引时，用户可指定其分片的数量，默认数量为5个。 </p><p>Shard有两种类型：primary和replica，即主shard及副本shard。Primary shard用于文档存储，每个新的索引会自动创建5个Primary shard，当然此数量可在索引创建之前通过配置自行定义，不过，一旦创建完成，其Primary shard的数量将不可更改。Replica shard是Primary Shard的副本，用于冗余数据及提高搜索性能。每个Primary shard默认配置了一个Replica shard，但也可以配置多个，且其数量可动态更改。ES会根据需要自动增加或减少这些Replica shard的数量。</p><h3 id="Queries-and-Filters"><a href="#Queries-and-Filters" class="headerlink" title="Queries and Filters"></a>Queries and Filters</h3><p>Elasticsearch中存在两种DSL：<br>查询DSL(query DSL)<br>过滤DSL(filter DSL)</p><p>当执行full-text查询或查询结果依赖于相关度分值时应该使用查询DSL</p><p>——<strong>“这个文档匹不匹配这个查询，它的相关度高么？”</strong></p><p>当执行精确值(extac-value)查询或查询结果仅有“yes”或“no”两种结果时应该使用过滤DSL。</p><p>——<strong>“这个文档匹不匹配？”</strong></p><p>Filter DSL计算及过滤速度较快，且适于缓存，因此可有效提升后续查询请求的执行速度。而query DSL不仅要查找匹配的文档，还需要计算每个文件的相关度分值，因此为更重量级的查询，其查询结果不会被缓存。不过，得益于倒排索引，一个仅返回少量文档的简单query或许比一个跨数百万文档的filter执行起来并得显得更慢。</p><p>Filter DSL中常见的有term Filter、terms Filter、range Filter、exists and missing Filters和bool Filter。而Query DSL中常见的有match_all、match 、multi_match及bool Query。</p><p>Queries用于查询上下文，而filters用于过滤上下文，不过，Elasticsearch的API也支持此二者合并运行。组合查询可用于合并查询子句，组合过滤用于合并过滤子句，然而，Elasticsearch的使用习惯中，也常会把filter用于query上进行过滤。不过，很少有机会需要把query用于filter上的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Elasticsearch-基本概念&quot;&gt;&lt;a href=&quot;#Elasticsearch-基本概念&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch 基本概念&quot;&gt;&lt;/a&gt;Elasticsearch 基本概念&lt;/h1&gt;&lt;h3 id=&quot;索引-Index&quot;&gt;&lt;a href=&quot;#索引-Index&quot; class=&quot;headerlink&quot; title=&quot;索引(Index)&quot;&gt;&lt;/a&gt;索引(Index)&lt;/h3&gt;&lt;p&gt;ES将数据存储于一个或多个索引中，索引是具有类似特性的文档的集合。类比传统的关系型数据库领域来说，索引相当于SQL中的一个数据库，或者一个数据存储方案(schema)。索引由其名称(必须为全小写字符)进行标识，并通过引用此名称完成文档的创建、搜索、更新及删除操作。一个ES集群中可以按需创建任意数目的索引。&lt;br&gt;
    
    </summary>
    
      <category term="日志" scheme="https://www.oolongbox.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Elasticsearch" scheme="https://www.oolongbox.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>表驱动方法在java、scala中的实践</title>
    <link href="https://www.oolongbox.com/box/44b989a/"/>
    <id>https://www.oolongbox.com/box/44b989a/</id>
    <published>2019-04-08T11:11:51.000Z</published>
    <updated>2019-04-11T08:06:42.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表驱动方法在java、scala中的实践"><a href="#表驱动方法在java、scala中的实践" class="headerlink" title="表驱动方法在java、scala中的实践"></a>表驱动方法在java、scala中的实践</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表驱动法是一种编程模式（Scheme），从表里面查找信息而不使用逻辑语句（if 和case） 它的好处是消除代码里面到处出现的if、else、swith语句，让凌乱代码变得简明和清晰。</span><br><span class="line">对简单情况而言，表驱动方法可能仅仅使逻辑语句更容易和直白，但随着逻辑的越来越复杂，表驱动法就愈发有吸引力。</span><br></pre></td></tr></table></figure><p>个人感觉表驱动和策略模式很相似</p><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>策略枚举：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> OptEnum &#123;</span><br><span class="line">    OPT1(<span class="number">1</span>, <span class="string">"OPT1"</span>) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">opt</span><span class="params">(ParamVo param)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"opt1 : do something"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    OPT2(<span class="number">2</span>, <span class="string">"OPT2"</span>) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">opt</span><span class="params">(ParamVo param)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"opt2 : do something"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    OPT3(<span class="number">3</span>, <span class="string">"OPT1"</span>) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">opt</span><span class="params">(ParamVo param)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"opt3 : do something"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    OptEnum(<span class="keyword">int</span> value, String text) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OptEnum <span class="title">get</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (OptEnum opt : OptEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (opt.getValue() == value)</span><br><span class="line">                <span class="keyword">return</span> opt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">opt</span><span class="params">(ParamVo param)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>参数：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> optType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOptType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> optType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOptType</span><span class="params">(<span class="keyword">int</span> optType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.optType = optType;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>场景类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParamVo param = <span class="keyword">new</span> ParamVo();</span><br><span class="line">        param.setOptType(OptEnum.OPT1.getValue());</span><br><span class="line">        OptEnum opt = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((opt = OptEnum.get(param.getOptType())) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">        opt.opt(param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="scala"><a href="#scala" class="headerlink" title="scala"></a>scala</h2><p>操作类：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TableDriven</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> opt1 = (param: <span class="type">ParamVo</span>) =&gt; &#123;</span><br><span class="line">    println(<span class="string">"opt1 : do something"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> opt2 = (param: <span class="type">ParamVo</span>) =&gt; &#123;</span><br><span class="line">    println(<span class="string">"opt2 : do something"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> opt3 = (param: <span class="type">ParamVo</span>) =&gt; &#123;</span><br><span class="line">    println(<span class="string">"opt3 : do something"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> optMap = <span class="type">Map</span>(<span class="type">OptEum</span>.<span class="type">OPT1</span>.id -&gt; opt1,</span><br><span class="line">    <span class="type">OptEum</span>.<span class="type">OPT2</span>.id -&gt; opt2,</span><br><span class="line">    <span class="type">OptEum</span>.<span class="type">OPT3</span>.id -&gt; opt3)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">opt</span></span>(param: <span class="type">ParamVo</span>) = &#123;</span><br><span class="line">    <span class="keyword">val</span>  opt = optMap.get(param.optType)</span><br><span class="line">    <span class="keyword">if</span>(!opt.nonEmpty)&#123;</span><br><span class="line">      <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    opt.get.apply(param)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">OptEum</span> <span class="keyword">extends</span> <span class="title">Enumeration</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> <span class="type">OPT1</span> = <span class="type">Value</span>(<span class="number">1</span>, <span class="string">"OPT1"</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">OPT2</span> = <span class="type">Value</span>(<span class="number">2</span>, <span class="string">"OPT2"</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">OPT3</span> = <span class="type">Value</span>(<span class="number">3</span>, <span class="string">"OPT3"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParamVo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> _optType: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">optType</span> </span>= _optType</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">optType_=</span></span>(v: <span class="type">Int</span>) = &#123;</span><br><span class="line">    _optType = v</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>场景类：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> param = <span class="keyword">new</span> <span class="type">ParamVo</span></span><br><span class="line">    param.optType = <span class="type">OptEum</span>.<span class="type">OPT1</span>.id</span><br><span class="line">    <span class="type">TableDriven</span>.opt(param)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;表驱动方法在java、scala中的实践&quot;&gt;&lt;a href=&quot;#表驱动方法在java、scala中的实践&quot; class=&quot;headerlink&quot; title=&quot;表驱动方法在java、scala中的实践&quot;&gt;&lt;/a&gt;表驱动方法在java、scala中的实践&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;表驱动法是一种编程模式（Scheme），从表里面查找信息而不使用逻辑语句（if 和case） 它的好处是消除代码里面到处出现的if、else、swith语句，让凌乱代码变得简明和清晰。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;对简单情况而言，表驱动方法可能仅仅使逻辑语句更容易和直白，但随着逻辑的越来越复杂，表驱动法就愈发有吸引力。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;个人感觉表驱动和策略模式很相似&lt;/p&gt;
&lt;h2 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;java&quot;&gt;&lt;/a&gt;java&lt;/h2&gt;&lt;p&gt;策略枚举：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; OptEnum &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OPT1(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;OPT1&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ParamVo param)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;opt1 : do something&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OPT2(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;OPT2&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ParamVo param)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;opt2 : do something&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OPT3(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;OPT1&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ParamVo param)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;opt3 : do something&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    OptEnum(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value, String text) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.value = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.text = text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; OptEnum &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (OptEnum opt : OptEnum.values()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (opt.getValue() == value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; opt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ParamVo param)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="https://www.oolongbox.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="scala" scheme="https://www.oolongbox.com/tags/scala/"/>
    
      <category term="java" scheme="https://www.oolongbox.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>tracer：倒排索引+快速分类</title>
    <link href="https://www.oolongbox.com/box/6677305f/"/>
    <id>https://www.oolongbox.com/box/6677305f/</id>
    <published>2019-04-08T09:52:14.900Z</published>
    <updated>2019-04-11T08:06:42.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tracer：倒排索引-快速分类"><a href="#tracer：倒排索引-快速分类" class="headerlink" title="tracer：倒排索引+快速分类"></a>tracer：倒排索引+快速分类</h1><ul><li>索引，是为了加快信息主体查找过程，基于目标信息主体，预先创建的一种储存结构。</li><li>倒排索引（Inverted index），是一种索引方法，基于信息主体的属性值进行构建。</li><li>本工程基于Map+BitSet结构，采用：属性-&gt;属性值-&gt;信息主体唯一标识，预先构建倒排索引，加速查找过程。</li></ul><p><em>source code：</em></p><p><a href="https://github.com/warmqing/tracer" target="_blank" rel="noopener">https://github.com/warmqing/tracer</a></p><h2 id="索引存储"><a href="#索引存储" class="headerlink" title="索引存储"></a>索引存储</h2><p>定义商品属性【Brand，Color，Size】</p><p>分类A</p><table><thead><tr><th>属性名</th><th>属性值</th></tr></thead><tbody><tr><td>Brand（品牌）</td><td>AAA</td></tr><tr><td>Color（颜色）</td><td>Blue，Red，White</td></tr><tr><td>Size（尺寸）</td><td>M，L</td></tr></tbody></table><p>分类B</p><table><thead><tr><th>属性名</th><th>属性值</th></tr></thead><tbody><tr><td>Brand（品牌）</td><td>BBB</td></tr><tr><td>Color（颜色）</td><td>Blue，Black</td></tr><tr><td>Size（尺寸）</td><td>M，L，XL</td></tr></tbody></table><a id="more"></a><p><img src="https://i.loli.net/2019/04/08/5cab4e3da56cd.jpg" alt></p><h2 id="索引查询"><a href="#索引查询" class="headerlink" title="索引查询"></a>索引查询</h2><p>商品1【Brand：AAA】-&gt; 单一属性查询 -&gt; 可能属于ClassA,一定不属于ClassB</p><p>商品2【Color：Blue】-&gt; 单一属性查询 -&gt; 可能属于ClassA, 可能属于ClassB</p><p>商品3【Brand：AAA，Color：Red，Size：M】-&gt;全属性查询 -&gt;一定属于 ClassA</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>快速分类问题</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;tracer：倒排索引-快速分类&quot;&gt;&lt;a href=&quot;#tracer：倒排索引-快速分类&quot; class=&quot;headerlink&quot; title=&quot;tracer：倒排索引+快速分类&quot;&gt;&lt;/a&gt;tracer：倒排索引+快速分类&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;索引，是为了加快信息主体查找过程，基于目标信息主体，预先创建的一种储存结构。&lt;/li&gt;
&lt;li&gt;倒排索引（Inverted index），是一种索引方法，基于信息主体的属性值进行构建。&lt;/li&gt;
&lt;li&gt;本工程基于Map+BitSet结构，采用：属性-&amp;gt;属性值-&amp;gt;信息主体唯一标识，预先构建倒排索引，加速查找过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;source code：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/warmqing/tracer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/warmqing/tracer&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;索引存储&quot;&gt;&lt;a href=&quot;#索引存储&quot; class=&quot;headerlink&quot; title=&quot;索引存储&quot;&gt;&lt;/a&gt;索引存储&lt;/h2&gt;&lt;p&gt;定义商品属性【Brand，Color，Size】&lt;/p&gt;
&lt;p&gt;分类A&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th&gt;属性值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Brand（品牌）&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Color（颜色）&lt;/td&gt;
&lt;td&gt;Blue，Red，White&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Size（尺寸）&lt;/td&gt;
&lt;td&gt;M，L&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;分类B&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th&gt;属性值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Brand（品牌）&lt;/td&gt;
&lt;td&gt;BBB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Color（颜色）&lt;/td&gt;
&lt;td&gt;Blue，Black&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Size（尺寸）&lt;/td&gt;
&lt;td&gt;M，L，XL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="日志" scheme="https://www.oolongbox.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="java" scheme="https://www.oolongbox.com/tags/java/"/>
    
      <category term="utils" scheme="https://www.oolongbox.com/tags/utils/"/>
    
  </entry>
  
  <entry>
    <title>使用Algolia索引hexo网站内容</title>
    <link href="https://www.oolongbox.com/box/cf61bef0/"/>
    <id>https://www.oolongbox.com/box/cf61bef0/</id>
    <published>2019-04-07T11:11:51.000Z</published>
    <updated>2019-04-11T08:06:42.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Algolia索引hexo网站内容"><a href="#使用Algolia索引hexo网站内容" class="headerlink" title="使用Algolia索引hexo网站内容"></a>使用Algolia索引hexo网站内容</h1><h2 id="Algolia配置"><a href="#Algolia配置" class="headerlink" title="Algolia配置"></a>Algolia配置</h2><p>进入hexo工作目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --save hexo-algolia</span><br></pre></td></tr></table></figure><p>在_config.yml中配置algolia选项：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">algolia:</span><br><span class="line">  applicationID: <span class="string">'applicationID'</span></span><br><span class="line">  apiKey: <span class="string">'apiKey'</span></span><br><span class="line">  indexName: <span class="string">'...'</span></span><br></pre></td></tr></table></figure><p>注册登录<a href="https://www.algolia.com" target="_blank" rel="noopener">https://www.algolia.com</a></p><p>找到如下：</p><p>Application ID</p><p><img src="https://i.loli.net/2019/04/08/5cab21bebae38.png" alt><br><a id="more"></a></p><p>search-only api key（这里配置仅查询使用即可）</p><p><img src="https://i.loli.net/2019/04/08/5cab21f135304.png" alt></p><p>indexName（需要新增index）</p><p><img src="https://i.loli.net/2019/04/08/5cab228466ea6.png" alt></p><h2 id="在Hexo主题中启用algolia"><a href="#在Hexo主题中启用algolia" class="headerlink" title="在Hexo主题中启用algolia"></a>在Hexo主题中启用algolia</h2><p>见各个主题配置</p><h2 id="algolia索引网站内容"><a href="#algolia索引网站内容" class="headerlink" title="algolia索引网站内容"></a>algolia索引网站内容</h2><p>新增具有Add object, Delete object, List indexes, Delete index权限的API key</p><p>如下：</p><p><img src="https://i.loli.net/2019/04/08/5cab238e33097.png" alt="1554719587049"></p><p>添加环境变量HEXO_ALGOLIA_INDEXING_KEY，执行hexo algolia命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ export HEXO_ALGOLIA_INDEXING_KEY=…</span><br><span class="line">$ ./node_modules/.bin/hexo algolia</span><br></pre></td></tr></table></figure><p>有重复索引时，可使用，如下命令:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./node_modules/.bin/hexo algolia --flush</span><br></pre></td></tr></table></figure></p><p>清除索引并重建</p><p>详细请见：<a href="https://github.com/oncletom/hexo-algolia" target="_blank" rel="noopener">https://github.com/oncletom/hexo-algolia</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用Algolia索引hexo网站内容&quot;&gt;&lt;a href=&quot;#使用Algolia索引hexo网站内容&quot; class=&quot;headerlink&quot; title=&quot;使用Algolia索引hexo网站内容&quot;&gt;&lt;/a&gt;使用Algolia索引hexo网站内容&lt;/h1&gt;&lt;h2 id=&quot;Algolia配置&quot;&gt;&lt;a href=&quot;#Algolia配置&quot; class=&quot;headerlink&quot; title=&quot;Algolia配置&quot;&gt;&lt;/a&gt;Algolia配置&lt;/h2&gt;&lt;p&gt;进入hexo工作目录：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save hexo-algolia&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在_config.yml中配置algolia选项：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;algolia:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  applicationID: &lt;span class=&quot;string&quot;&gt;&#39;applicationID&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  apiKey: &lt;span class=&quot;string&quot;&gt;&#39;apiKey&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  indexName: &lt;span class=&quot;string&quot;&gt;&#39;...&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注册登录&lt;a href=&quot;https://www.algolia.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.algolia.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;找到如下：&lt;/p&gt;
&lt;p&gt;Application ID&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/08/5cab21bebae38.png&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
      <category term="日志" scheme="https://www.oolongbox.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="scala" scheme="https://www.oolongbox.com/tags/scala/"/>
    
      <category term="java" scheme="https://www.oolongbox.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.oolongbox.com/box/4a17b156/"/>
    <id>https://www.oolongbox.com/box/4a17b156/</id>
    <published>2019-04-03T02:20:26.184Z</published>
    <updated>2019-04-11T08:06:42.545Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="日志" scheme="https://www.oolongbox.com/categories/%E6%97%A5%E5%BF%97/"/>
    
      <category term="Hello World" scheme="https://www.oolongbox.com/categories/%E6%97%A5%E5%BF%97/Hello-World/"/>
    
    
  </entry>
  
</feed>
